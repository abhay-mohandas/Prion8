-16/32/64 bit architecture
-16 bit instruction length
-Max 32 general purpose register
-Max 32 dedicated system register
-Little endian
-Default 6-bit [5:0] opcode length -> 64 instructions
-0x3E op dedicated for Opcode Extension [15:6] -> 1024 additional instructions
-Byte(8)/Half Word(16)/Word(32)/Double Word(64)
-General purpose register range: R0-R23,MEMR,RES0,RES1,IMMR
-System registers: PC,SP,IR,FLAGS,CTL0, etc
-Special registers: 16-bit registers mapped to memory address.

Instruction:

[0:5 - Opcode][6:15 - Payload]
111111|11111|11111
Opcode[0:15]:

ALU [0x00-0x17]:
 
00 ADD   SRC1 , SRC2 - Add SRC1 and SRC2 and store the result in RES0
  [0:5] [6:10] [11:15]
01 SUB   SRC1 , SRC2 - Sub SRC2 from SRC1 and store the result in RES0
  [0:5] [6:10] [11:15]
02 MUL   SRC1 , SRC2 - Multiply SRC1 and SRC2 and store the result in {Upper half = RES1,Lower half = RES0}
  [0:5] [6:10] [11:15]
03 DIV   SRC1 , SRC2 - Divide SRC1 by SRC2 and store the result in {Remainder = RES1,Quotient = RES0}
  [0:5] [6:10] [11:15]
04 AND   SRC1 , SRC2 - Bitwise AND between SRC1 and SRC2 and store the result in RES0
  [0:5] [6:10] [11:15]
05 OR    SRC1 , SRC2 - Bitwise OR between SRC1 and SRC2 and store the result in RES0
  [0:5] [6:10] [11:15]
06 XOR   SRC1 , SRC2 - Bitwise XOR between SRC1 and SRC2 and store the result in RES0
  [0:5] [6:10] [11:15]
07 NOT   SRC         - Bitwise NOT on SRC store the result in SRC
  [0:5] [6:10]
08 SHL   SRC1 , SRC2 - Shift the value in SRC1 to left by the value in SRC2
  [0:5] [6:10] [11:15]
09 SHR   SRC1 , SRC2 - Shift the value in SRC1 to right by the value in SRC2
  [0:5] [6:10] [11:15]
0A CMP   SRC1 , SRC2 - Sub SRC2 from SRC1 and update the FLAGS
  [0:5] [6:10] [11:15]
0B NEG   SRC         - Negate the value in SRC and store the value in SRC
  [0:5] [6:10]
0C INC   SRC         - Increment the value in SRC by 1
  [0:5] [6:10]
0D DEC   SRC         - Decrement the value in SRC by 1
  [0:5] [6:10]
0E RMOV  DEST , SRC  - Move value of SRC to DEST
  [0:5] [6:10] [11:15]
0F SWAP  SRC1 , SRC2 - Swap the values of SRC1 and SRC2
  [0:5] [6:10] [11:15]
10 ROL   SRC1 , SRC2 - Rotate the value in SRC1 to left by the value in SRC2
  [0:5] [6:10] [11:15]
11 ROR   SRC1 , SRC2 - Rotate the value in SRC1 to right by the value in SRC2
  [0:5] [6:10] [11:15]
12 PUSH  SRC         - Push the value in SRC onto the stack and update the Stack Pointer
  [0:5] [6:10]
13 POP   DEST        - Pop the value from stack and store it in DEST and update the Stack Pointer
  [0:5] [6:10]
14 ADC   SRC1 , SRC2 - Add SRC1, SRC2 and Carry and store the value in RES0
  [0:5] [6:10] [11:15]
15 SBC   SRC1 , SRC2 - Sub SRC1, SRC2 and Carry and store the value in RES0
  [0:5] [6:10] [11:15]
16 -
17 -

Memory Access [0x18-0x1F]:

18 LDB   DEST , SRC  - Load a byte from the address in SRC to DEST
  [0:5] [6:10] [11:15]
19 STB   DEST , SRC  - Store a byte from SRC to the address in DEST
  [0:5] [6:10] [11:15]
1A LDH   DEST , SRC  - Load a half-word from the address in SRC to DEST
  [0:5] [6:10] [11:15]
1B STH   DEST , SRC  - Store a half-word from SRC to the address in DEST
  [0:5] [6:10] [11:15]
1C -
1D -
1E -
1F -

Control Flow [0x20-0x27]:

20 JMP   DEST        - Unconditional jump to address in DEST
  [0:5] [6:10]
21 JZ    DEST        - Jump to address in DEST if ZF=1
  [0:5] [6:10]
22 JNZ   DEST        - Jump to address in DEST if ZF=0
  [0:5] [6:10]
23 JC    DEST        - Jump to address in DEST if CF=1
  [0:5] [6:10]
24 JNC   DEST        - Jump to address in DEST if CF=0
  [0:5] [6:10]
25 CALL  DEST        - Jump to address in DEST and push the return address to stack
  [0:5] [6:10]
26 INT   IMM         - Signal interrupt to jump to interrupt routine specified by the immediate value
  [0:5] [6:10]
27 RET               - Return to the address in stored in stack
  [0:5]

Misc [0x28-0x37]:

28 HLT               - Halt operation
  [0:5]
29 BITS  SRC1 , SRC2 - Set bit in SRC1 at position specified in SRC2
  [0:5] [6:10] [11:15]
2A BITR  SRC1 , SRC2 - Reset bit in SRC1 at position specified in SRC2
  [0:5] [6:10] [11:15]
2B WAIT              - Wait till interrupt arrives
  [0:5]
2C IN    SRC         - Write to I/O port specified in SRC
  [0:5] [6:10]
2D OUT   SRC         - Read from I/O port specified in SRC
  [0:5] [6:10]
2E OPEX              - OPcode EXtension
  [0:5]
2F NOP               - No op
  [0:5]
30 MOVS  SRC1 , SRC2 - Move value from General Purpose register SRC2 to System register SRC1
  [0:5] [6:10] [11:15]
31 MOVG  SRC1 , SRC2 - Move value from System Register SRC2 to General Purpose register SRC1
  [0:5] [6:10] [11:15]
32 IMOV  POS , IMM   - Move immediate value to GP register IMMR to byte position specified by POS value
  [0:5] [6:7] [8:15]
33 WSR   SRC1 , SRC2 - Write the value in SRC1 to Special Register Address in SRC2
  [0:5] [6:10] [11:15]
34 RSR   SRC1 , SRC2 - Read the value from Special Register Address in SRC2 to SRC1
  [0:5] [6:10] [11:15]
34 -
35 -
36 -
37 -

Reserved [0x38-0x3F]



