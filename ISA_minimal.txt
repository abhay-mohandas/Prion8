Instructions:

 7:0    - Instruction
         0         :         7 
      00-RMV[2]  DST[3] SRC[3]  DST and SRC -> GPR	Move value from SRC reg to DST reg
    0001-SHL[4]  SRC[2] POS[2]  SRC and POS -> R0-R3 	Shift SRC reg value to left by bits specified in POS reg, update flags
    0101-SHR[4]  SRC[2] POS[2]  SRC and POS -> R0-R3	Shift SRC reg value to right by bits specified in POS reg, update flags
    1001-ADD[4]  SRC[2] SRC[2]  SRC -> R0-R3		SRC+SRC=RES0, update flags
    1101-SUB[4]  SRC[2] SRC[2]  SRC -> R0-R3		SRC-SRC=RES0, update flags
    0010-AND[4]  SRC[2] SRC[2]  SRC -> R0-R3		Bitwise AND, store result in RES0 and update flags
    0110-OR[4]   SRC[2] SRC[2]  SRC -> R0-R3		Bitwise OR, store result in RES0 and update flags
    1010-XOR[4]  SRC[2] SRC[2]  SRC -> R0-R3		Bitwise XOR, store result in RES0 and update flags
    1110-IMV[4]  IMM[4]		IMMEDIATE VALUE[4]		Move 4-bit immediate value to the lower 4-bits of PD0
   00011-MGS[5]  SRC[3]		SRC -> SPR		(M)ove (G)PR to (S)PR, move value from [PD1:PD0] to SRC SPR
   10011-MSG[5]  SRC[3]		SRC -> SPR		(M)ove (S)PR to (G)PR, move value from SRC SPR to [PD1:PD0]
00001011-SMW[8]						(S)ystem(M)emory(W)rite, write value from PD0 to address in MADDR
00011011-SMR[8]						(S)ystem(M)emory(R)rite, read value from address in MADDR to PD0
00101011-MUL[8]						PD1*PD0=[RES1:RES0]
00111011-DIV[8]						PD1/PD0=[Remainer in RES1][Quotient in RES0]
01001011-NOP[8]						No Operation
01011011-BTS[8]						Set bit in PD0 at position specified by the value in PD1, position value from 0 to 7
01101011-BTC[8]						Clear bit in PD0 at position specified by the value in PD1, position value from 0 to 7
01111011-JMP[8]						Jump to address in MADDR
10001011-JT[8]            Jump to address in MADDR if True Flag=1
10011011-11101011[RESERVED]
11111011-OPEX[8]          Opcode Extension, provides upto 256 additional instructions. Possible implementations: 
                          1) Data in PD1 is executed as instruction
                          2) Intruction fetched after OPEX
  000111-PUSH[6] SRC[2]		SRC -> R0-R3		Push the value in SRC reg onto the stack and update SP
  001111-POP[6]  SRC[2]		SRC -> R0-R3		Pop the value from stack into SRC reg and update SP
  010111-LD[6]   SRC[2]		SRC -> R0-R3		Load value from address in MADDR into SRC reg
  011111-ST[6]   SRC[2]		SRC -> R0-R3		Store value in SRC reg into address in MADDR
  100111-ACR[6]  SRC[2]		SRC -> R0-R3		(A)dd (C)arry to (R)eg,SRC+CF=RES0 and update flags
  101111-SCR[6]  SRC[2]		SRC -> R0-R3		(S)ub (C)arry from (R)eg,SRC-CF=RES0 and update flags
  110111-CMP[6]  SRC[2]		SRC -> R0-R3		Compare, RES-SRC and update flags
00111111-JZ[8]						Jump to address in MADDR if Carry Flag=1
01111111-JC[8]						Jump to address in MADDR if Zero Flag=1
10111111-CALL[8]					Call to address in MADDR and save return address in stack
11111111-RET[8]						Return to return address saved in stack


