Instructions:

 7:0    - Instruction
         0         :         7 
00000000-NOP[8]						No operation
00000100-JZ[8]						Jump to address in MADDR if Zero Flag=1
00001000-JNZ[8]						Jump to address in MADDR if Zero Flag=0
00001100-JC[8]						Jump to address in MADDR if Carry Flag=1
00010000-JNC[8]						Jump to address in MADDR if Carry Flag=0
00010100-JT[8]            				Jump to address in MADDR if True Flag=1
00011000-JMP[8]						Jump to address in MADDR
00011100-CALL[8]					Call to address in MADDR and save return address in stack
00100000-RET[8]						Return to return address saved in stack
00100100-MUL[8]						RC*RD=[RB:RA] and update flags
00101000-DIV[8]						RC/RD=[Remainer in RB][Quotient in RA] and update flags
00101100-BT[8]						Copy the bit value in RA at position specified by the value in RB, position value from 0 to 7
00110000-BTS[8]						Set bit in RA at position specified by the value in RB, position value from 0 to 7
00110100-BTC[8]						Clear bit in RA at position specified by the value in RB, position value from 0 to 7
00111100-ACR[8]						(A)dd (C)arry to (R)A, RA+CF=RA and update flags
01000000-SCR[8]						(S)ub (C)arry from (R)eg, RA-CF=RA and update flags
01000100-MGS[8]						(M)ove (G)PR to (S)PR, move value from [RB:RA] to SRC SPR specified in RC
01001000-MSG[8]						(M)ove (G)PR to (S)PR, move value from SRC SPR specified in RC to [RB:RA]
01001100-FENCE[8]					Used to serialise all previous memory operations
01010000-LWO[8]						(L)oad (W)ith (O)ffset, Load value from address MADDR+RA into RB
01010100-SWO[8]						(S)tore (W)ith (O)ffset, Store value from RB to address MADDR+RA
01011000-INTR[8]					Signal Interrupt, Interrupt number is specified in RC
01011100-SFB[8]						(S)et (F)lag (B)it, set flag specified in RA
01100000-CFB[8]						(C)lear (F)lag (B)it, clear flag specified in RA
01100100-CLRGP[8]					Clear all the GPRs
01101000-SWRB0[8]					(S)wap (W)ith (R)egister (B)ank 0, values of GPRs and Reg Bank0 is swapped
01101100-SWRB1[8]					(S)wap (W)ith (R)egister (B)ank 1, values of GPRs and Reg Bank1 is swapped
01110000-SWRB2[8]					(S)wap (W)ith (R)egister (B)ank 2, values of GPRs and Reg Bank2  is swapped
01110100-CMP[8]						Compare, RB-RA and update flags
01111000-LDH[8]						Load half word/2 bytes from address in MADDR to [RB:RA]
01111100-STH[8]						Store half word/2 bytes to address in MADDR from [RB:RA]
10000000-11111100 [OPEX DEFINED]
    0001-IMM[4]  Immediate[4]				Move 4-bit immediate value to the lower 4-bits of RA
   00101-LD[5]   SRC[3]		SRC -> GPR		Load value from address in MADDR into SRC reg 
   01001-ST[5]   SRC[3]		SRC -> GPR		Store value in SRC reg into address in MADDR
   01101-PUSH[5] SRC[3]		SRC -> GPR		Push the value in SRC reg onto the stack and update SP
   10101-POP[5]  SRC[3]		SRC -> GPR		Pop the value from stack into SRC reg and update SP
   11001-INC[5]  SRC[3]		SRC -> GPR		Increment the value in SRC by 1
   11101-DEC[5]  SRC[3]		SRC -> GPR		Decrement the value in SRC by 1
   00010-ADD[5]  SRC[3]		SRC -> GPR		Add SRC to RA and store the result in RA, update flags
   00110-SUB[5]  SRC[3]		SRC -> GPR		Sub SRC from RA and store the result in RA, update flags
   01010-AND[5]  SRC[3]		SRC -> GPR		AND SRC to RA and store the result in RA, update flags
   01110-OR[5]   SRC[3]		SRC -> GPR		OR SRC to RA and store the result in RA, update flags
   10010-XOR[5]  SRC[3]		SRC -> GPR		XOR SRC to RA and store the result in RA, update flags
   10110-NOT[5]  SRC[3]		SRC -> GPR		NOT SRC to RA and store the result in RA, update flags
   11010-SHL[5]  SRC[3]		SRC -> GPR		Shift Left value in RA by the value in SRC, update flags
   11110-SHR[5]  SRC[3]		SRC -> GPR		Shift Right value in RA by the value in SRC, update flags
      11-RMV[2]  DST[3] SRC[3]  DST and SRC -> GPR	Move value from SRC reg to DST reg